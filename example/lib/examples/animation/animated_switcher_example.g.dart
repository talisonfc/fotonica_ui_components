// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'animated_switcher_example.dart';

// **************************************************************************
// Generator: CodeSnaphostGeneretor
// **************************************************************************

extension AnimatedSwitcherExampleSourceCode on AnimatedSwitcherExample {
  get sourceCode {
    return "import 'package:annotations/annotations.dart';\n"
        "import 'package:example/example.dart';\n"
        "import 'package:flutter/material.dart';\n"
        "\n"
        "part 'animated_switcher_example.g.dart';\n"
        "\n"
        "@generateCodeSnapshot\n"
        "class AnimatedSwitcherExample extends Example {\n"
        "  @override\n"
        "  get code => sourceCode;\n"
        "\n"
        "  @override\n"
        "  State<StatefulWidget> createState() {\n"
        "    return _AnimatedSwitcherExample();\n"
        "  }\n"
        "}\n"
        "\n"
        "class _AnimatedSwitcherExample extends State<AnimatedSwitcherExample> {\n"
        "  Text txt1 = Text(\"Remover\");\n"
        "  Text txt2 = Text(\"Lista de CPFs\");\n"
        "\n"
        "  Widget wrap(Widget widget, Key key) {\n"
        "    return Container(\n"
        "      width: 100,\n"
        "      height: 100,\n"
        "      key: key,\n"
        "      color: Colors.blue,\n"
        "      child: widget,\n"
        "    );\n"
        "  }\n"
        "\n"
        "  late Widget child;\n"
        "  bool isKey1 = true;\n"
        "\n"
        "  @override\n"
        "  void initState() {\n"
        "    super.initState();\n"
        "    child = wrap(txt1, ValueKey(1));\n"
        "  }\n"
        "\n"
        "  void change() {\n"
        "    setState(() {\n"
        "      child = isKey1 ? wrap(txt1, ValueKey(2)) : wrap(txt1, ValueKey(1));\n"
        "    });\n"
        "    isKey1 = !isKey1;\n"
        "  }\n"
        "\n"
        "  @override\n"
        "  Widget build(BuildContext context) {\n"
        "    return ListView(\n"
        "      shrinkWrap: true,\n"
        "      children: [\n"
        "        TextButton(\n"
        "          onPressed: () {\n"
        "            change();\n"
        "          },\n"
        "          child: Text(\"Change\"),\n"
        "        ),\n"
        "        Wrap(\n"
        "          children: [\n"
        "            Container(\n"
        "              width: 400,\n"
        "              height: 500,\n"
        "              child: AnimatedSwitcher(\n"
        "                  duration: Duration(seconds: 2),\n"
        "                  transitionBuilder: (Widget child, Animation<double> animation) {\n"
        "                    // return ScaleTransition(\n"
        "                    //   scale: animation,\n"
        "                    //   child: child,\n"
        "                    // );\n"
        "                    // return RotationTransition(turns: animation, child: child,);\n"
        "                    // return FadeTransition(opacity: animation, child: child,);\n"
        "                    // return PositionedTransition(rect: animation, child: child);\n"
        "                    return PositionedTransition(\n"
        "                        rect: RelativeRectTween(\n"
        "                            begin: RelativeRect.fromSize(\n"
        "                                const Rect.fromLTWH(0, 0, 100, 100),\n"
        "                                Size(400, 500)),\n"
        "                            end: RelativeRect.fromSize(\n"
        "                                const Rect.fromLTWH(300, 400, 100, 100),\n"
        "                                Size(400, 500))\n"
        "                        ).animate(animation),\n"
        "                        child: child);\n"
        "                  },\n"
        "                  // switchInCurve: Curves.linearToEaseOut,\n"
        "                  child: child),\n"
        "            ),\n"
        "          ],\n"
        "        )\n"
        "      ],\n"
        "    );\n"
        "  }\n"
        "}\n"
        "\n";
  }
}
